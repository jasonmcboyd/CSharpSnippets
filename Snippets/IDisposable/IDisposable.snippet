<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>IDisposable</Title>
      <Author>Jason Boyd</Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>_IDisposable</Shortcut>
    </Header>
    <Snippet>
      <Code Language="csharp" Delimiter="$"><![CDATA[#region IDisposable Implementation

        // See http://msdn.microsoft.com/en-us/library/b1yfkh5e(v=vs.110).aspx for the proper
        // implementation of the Dispose pattern.

        private bool _IsDisposed = false;
        /// <summary>
        /// Gets a boolean value that indicates if the object has been disposed.
        /// </summary>
        public bool IsDisposed
        {
            get { return this._IsDisposed; }
            private set { this._IsDisposed = value; }
        }

        protected virtual void Dispose(bool disposing)
        {
            // If this object has already been disposed then exit without doing anything.
            if (this.IsDisposed)
            {
                return;
            }

            // Lock the critical section to ensure that more than one thread cannot attempt to 
            // dispose the object at the same time.
            lock (this)
            {
                // Check IsDisposed again in case more than one thread got to the lock.
                // This ensures that only the first thread through the lock will execute the 
                // critical section and that any other threads will exit without doing anything.
                if (this.IsDisposed)
                {
                    return;
                }

                // Dispose of the object.
                if (disposing)
                {
                    // Dispose of resources here.
                }

                // Set IsDisposed to true.
                this.IsDisposed = true;
            }
        }

        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>